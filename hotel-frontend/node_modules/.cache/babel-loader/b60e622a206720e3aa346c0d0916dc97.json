{"ast":null,"code":"var _jsxFileName = \"/Users/remypearlstone/Desktop/webdev/hotel-engine-github/hotel-frontend/src/Search.js\";\nimport React, { useState, useEffect } from \"react\";\n\nconst Search = () => {\n  // const [status, setStatus] = useState('idle')\n  const [query, setQuery] = useState(\"\");\n  const [items, setItems] = useState([]);\n  useEffect(() => {\n    // console.log(\"hello\")\n    // if (!query) return;\n    const fetchData = async () => {\n      // setStatus('fetching');\n      const response = await fetch(`https://api.github.com/search/repositories?q=${query}`);\n      const items = await response.json();\n      console.log(items);\n      setItems(items.items);\n      console.log(\"hello\");\n      console.log(items.items); // setStatus('fetched')\n    };\n\n    fetchData();\n  }, [query]);\n\n  const handleSubmit = e => {\n    console.log(e.target.value);\n    e.preventDefault();\n    const query = e.target.value;\n\n    if (query) {\n      setQuery(query);\n      e.target.value = \"\";\n    }\n  };\n\n  const renderItems = () => {\n    // console.log(items)\n    if (!items || items.length <= 0) return;\n    return items.map(item => {\n      // console.log(item.name)\n      return /*#__PURE__*/React.createElement(\"li\", {\n        key: item.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 14\n        }\n      }, \"Name: \", item.name, \", Stars: \", item.stargazers_count);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }, \"Github Search\"), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"Form\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    autoFocus: true,\n    autoComplete: \"off\",\n    className: \"gitSearch\",\n    placeholder: \"search repo\",\n    name: \"search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, \"Search\")), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }, renderItems()));\n}; // import useInfiniteScroll from 'react-infinite-scroll-hook';\n// const Search = () => {\n//   const [searchString, setSearchString] = useState(\"\");\n//   const [items, setItems] = useState([]);\n//   const [hasNextPage, setHasNextPage] = useState(false);\n//   const [page, setPage] = useState(1);\n//   const [loading, setLoading] = useState(false);\n//   const [star, setStar] = useState()\n//   const handleLoadMore = () => {\n//     setLoading(true);\n//     fetch(\n//       `http://localhost:5000/search/repositories?q=${searchString}`\n//       // `https://api.github.com/search/repositories?q=${searchString}`\n//     )\n//     .then(res => res.json())\n//     .then(res => {\n//       //  console.log(res)\n//        setLoading(false);\n//        let total = res.total_count\n//        let current = page * 30;\n//        let hasNextPage = (current <= total);\n//        setHasNextPage(hasNextPage);\n//       //  setHasNextPage(false)\n//        setItems([...items, res.items]);\n//       //  console.log(items)\n//        setStar(star)\n//        setPage(page+1)\n//     })\n//     .catch(() => {\n//       console.log(\"stop it\");\n//       setLoading(false);\n//     });\n//   }\n//   const infiniteRef = useInfiniteScroll({\n//     loading,\n//     hasNextPage,\n//     onLoadMore: handleLoadMore,\n//     // scrollContainer,\n//   });\n//   const renderItems = () => {\n//     if (!items || items.length <= 0 ) return\n//     return items[0].map((item) => {\n//       // console.log(item.name)\n//       return <li key={item.id}>Name: {item.name}, Stars: {item.stargazers_count}</li>\n//   })\n// }\n//   let onChange = e => {\n//     setItems([])\n//     setPage(0)\n//     setHasNextPage(true)\n//     setSearchString(e.target.value)\n//   }\n//   let handleSort = () => {\n//     // fetch(`http://localhost:4000/search/repositories?&sort=stars&order=desc`)\n//   }\n//   let handleClick = () => {\n//     alert(\"clicked\")\n//   }\n//   return (\n//     <div>\n//       <h1 className=\"header\">Github Search</h1>\n//       <div className=\"gitSearchDiv\">\n//         <input\n//           type=\"search\"\n//           className=\"gitSearch\"\n//           placeholder=\"search repo\"\n//           onChange={e => onChange(e)}\n//         />\n//         {/* <button onClick={handleSort()}>Sort</button> */}\n//       </div>\n//        <ul ref={infiniteRef} onClick={handleClick}>\n//         {renderItems()}\n//         {/* {loading && <li>Loading...</li>} */}\n//       </ul>\n//     </div>\n//   );\n// };\n\n\nexport default Search;","map":{"version":3,"sources":["/Users/remypearlstone/Desktop/webdev/hotel-engine-github/hotel-frontend/src/Search.js"],"names":["React","useState","useEffect","Search","query","setQuery","items","setItems","fetchData","response","fetch","json","console","log","handleSubmit","e","target","value","preventDefault","renderItems","length","map","item","id","name","stargazers_count"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\n\nconst Search = () => {\n  // const [status, setStatus] = useState('idle')\n  const [query, setQuery] = useState(\"\")\n  const [items, setItems] = useState([]);\n\n  useEffect(() => {\n    // console.log(\"hello\")\n    // if (!query) return;\n\n    const fetchData = async () => {\n      // setStatus('fetching');\n      const response = await fetch(\n        `https://api.github.com/search/repositories?q=${query}`\n      );\n      const items = await response.json();\n      console.log(items)\n      setItems(items.items);\n      console.log(\"hello\")\n      console.log(items.items)\n      // setStatus('fetched')\n    };\n    fetchData()\n  }, [query])\n\n\n  const handleSubmit = (e) => {\n    console.log(e.target.value)\n    e.preventDefault();\n\n    const query = e.target.value;\n\n    if(query) {\n      setQuery(query);\n      e.target.value = \"\"\n    }\n\n  }\n\n  const renderItems = () => {\n    // console.log(items)\n    if (!items || items.length <= 0 ) return\n    return items.map((item) => {\n      // console.log(item.name)\n      return <li key={item.id}>Name: {item.name}, Stars: {item.stargazers_count}</li>\n  })\n}\n\n    return (\n        <div>\n          <h1 className=\"header\">Github Search</h1>\n          <form className=\"Form\" onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                autoFocus\n                autoComplete=\"off\"\n                className=\"gitSearch\"\n                placeholder=\"search repo\"\n                name=\"search\"\n                \n              />\n            <button>Search</button>\n          </form>\n          <ul>\n            {renderItems()}\n          </ul>\n        </div>\n      );\n  };\n\n\n\n// import useInfiniteScroll from 'react-infinite-scroll-hook';\n\n\n// const Search = () => {\n//   const [searchString, setSearchString] = useState(\"\");\n//   const [items, setItems] = useState([]);\n//   const [hasNextPage, setHasNextPage] = useState(false);\n//   const [page, setPage] = useState(1);\n//   const [loading, setLoading] = useState(false);\n//   const [star, setStar] = useState()\n\n\n//   const handleLoadMore = () => {\n\n//     setLoading(true);\n//     fetch(\n//       `http://localhost:5000/search/repositories?q=${searchString}`\n//       // `https://api.github.com/search/repositories?q=${searchString}`\n//     )\n//     .then(res => res.json())\n//     .then(res => {\n//       //  console.log(res)\n//        setLoading(false);\n//        let total = res.total_count\n//        let current = page * 30;\n//        let hasNextPage = (current <= total);\n//        setHasNextPage(hasNextPage);\n//       //  setHasNextPage(false)\n//        setItems([...items, res.items]);\n//       //  console.log(items)\n//        setStar(star)\n//        setPage(page+1)\n//     })\n//     .catch(() => {\n//       console.log(\"stop it\");\n//       setLoading(false);\n//     });\n//   }\n\n//   const infiniteRef = useInfiniteScroll({\n//     loading,\n//     hasNextPage,\n//     onLoadMore: handleLoadMore,\n//     // scrollContainer,\n//   });\n\n//   const renderItems = () => {\n//     if (!items || items.length <= 0 ) return\n//     return items[0].map((item) => {\n//       // console.log(item.name)\n//       return <li key={item.id}>Name: {item.name}, Stars: {item.stargazers_count}</li>\n//   })\n// }\n\n//   let onChange = e => {\n//     setItems([])\n//     setPage(0)\n//     setHasNextPage(true)\n//     setSearchString(e.target.value)\n//   }\n\n//   let handleSort = () => {\n//     // fetch(`http://localhost:4000/search/repositories?&sort=stars&order=desc`)\n//   }\n\n//   let handleClick = () => {\n//     alert(\"clicked\")\n//   }\n\n//   return (\n//     <div>\n//       <h1 className=\"header\">Github Search</h1>\n//       <div className=\"gitSearchDiv\">\n//         <input\n//           type=\"search\"\n//           className=\"gitSearch\"\n//           placeholder=\"search repo\"\n//           onChange={e => onChange(e)}\n//         />\n//         {/* <button onClick={handleSort()}>Sort</button> */}\n//       </div>\n//        <ul ref={infiniteRef} onClick={handleClick}>\n//         {renderItems()}\n//         {/* {loading && <li>Loading...</li>} */}\n//       </ul>\n//     </div>\n//   );\n// };\n\nexport default Search;"]},"metadata":{},"sourceType":"module"}