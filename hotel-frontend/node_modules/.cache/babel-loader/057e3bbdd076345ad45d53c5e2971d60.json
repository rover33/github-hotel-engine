{"ast":null,"code":"var _jsxFileName = \"/Users/remypearlstone/Desktop/webdev/hotel-engine-github/hotel-frontend/src/Search.js\";\nimport React, { useState, useEffect } from \"react\";\n\nconst Search = () => {\n  const [status, setStatus] = useState('idle');\n  const [query, setQuery] = useState('');\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    if (!query) return;\n\n    const fetchData = async () => {\n      setStatus('fetching');\n      const response = await fetch(`https://api.github.com/search/repositories?q=${query}`);\n      const data = await response.json();\n      setData(...data, data.items);\n      setStatus('fetched');\n    };\n\n    fetchData();\n  }, [query]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const query = e.target.value;\n\n    if (query) {\n      setQuery(query);\n      e.target.value = \"\";\n    }\n  };\n\n  const renderItems = () => {\n    console.log(data.items);\n    if (!data || data.length <= 0) return;\n    return data.map(d => {\n      console.log(d.name);\n      return /*#__PURE__*/React.createElement(\"li\", {\n        key: d.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 14\n        }\n      }, \"Name: \", d.name, \", Stars: \", d.stargazers_count);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }, \"Github Search\"), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"Form\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"gitSearch\",\n    placeholder: \"search repo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, \"Search\")), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, renderItems()));\n}; // import useInfiniteScroll from 'react-infinite-scroll-hook';\n// const Search = () => {\n//   const [searchString, setSearchString] = useState(\"\");\n//   const [items, setItems] = useState([]);\n//   const [hasNextPage, setHasNextPage] = useState(false);\n//   const [page, setPage] = useState(1);\n//   const [loading, setLoading] = useState(false);\n//   const [star, setStar] = useState()\n//   const handleLoadMore = () => {\n//     setLoading(true);\n//     fetch(\n//       `http://localhost:5000/search/repositories?q=${searchString}`\n//       // `https://api.github.com/search/repositories?q=${searchString}`\n//     )\n//     .then(res => res.json())\n//     .then(res => {\n//       //  console.log(res)\n//        setLoading(false);\n//        let total = res.total_count\n//        let current = page * 30;\n//        let hasNextPage = (current <= total);\n//        setHasNextPage(hasNextPage);\n//       //  setHasNextPage(false)\n//        setItems([...items, res.items]);\n//       //  console.log(items)\n//        setStar(star)\n//        setPage(page+1)\n//     })\n//     .catch(() => {\n//       console.log(\"stop it\");\n//       setLoading(false);\n//     });\n//   }\n//   const infiniteRef = useInfiniteScroll({\n//     loading,\n//     hasNextPage,\n//     onLoadMore: handleLoadMore,\n//     // scrollContainer,\n//   });\n//   const renderItems = () => {\n//     if (!items || items.length <= 0 ) return\n//     return items[0].map((item) => {\n//       // console.log(item.name)\n//       return <li key={item.id}>Name: {item.name}, Stars: {item.stargazers_count}</li>\n//   })\n// }\n//   let onChange = e => {\n//     setItems([])\n//     setPage(0)\n//     setHasNextPage(true)\n//     setSearchString(e.target.value)\n//   }\n//   let handleSort = () => {\n//     // fetch(`http://localhost:4000/search/repositories?&sort=stars&order=desc`)\n//   }\n//   let handleClick = () => {\n//     alert(\"clicked\")\n//   }\n//   return (\n//     <div>\n//       <h1 className=\"header\">Github Search</h1>\n//       <div className=\"gitSearchDiv\">\n//         <input\n//           type=\"search\"\n//           className=\"gitSearch\"\n//           placeholder=\"search repo\"\n//           onChange={e => onChange(e)}\n//         />\n//         {/* <button onClick={handleSort()}>Sort</button> */}\n//       </div>\n//        <ul ref={infiniteRef} onClick={handleClick}>\n//         {renderItems()}\n//         {/* {loading && <li>Loading...</li>} */}\n//       </ul>\n//     </div>\n//   );\n// };\n\n\nexport default Search;","map":{"version":3,"sources":["/Users/remypearlstone/Desktop/webdev/hotel-engine-github/hotel-frontend/src/Search.js"],"names":["React","useState","useEffect","Search","status","setStatus","query","setQuery","data","setData","fetchData","response","fetch","json","items","handleSubmit","e","preventDefault","target","value","renderItems","console","log","length","map","d","name","id","stargazers_count"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\n\nconst Search = () => {\n  const [status, setStatus] = useState('idle')\n  const [query, setQuery] = useState('')\n  const [data ,setData] = useState([]);\n\n  useEffect(() => {\n    if (!query) return;\n\n    const fetchData = async () => {\n      setStatus('fetching');\n      const response = await fetch(\n        `https://api.github.com/search/repositories?q=${query}`\n      );\n      const data = await response.json();\n      setData(...data, data.items);\n      setStatus('fetched')\n    };\n    fetchData()\n  }, [query])\n\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    const query = e.target.value;\n\n    if(query) {\n      setQuery(query);\n      e.target.value = \"\"\n    }\n\n  }\n\n  const renderItems = () => {\n    console.log(data.items)\n    if (!data|| data.length <= 0 ) return\n    return data.map((d) => {\n      console.log(d.name)\n      return <li key={d.id}>Name: {d.name}, Stars: {d.stargazers_count}</li>\n  })\n}\n\n    return (\n        <div>\n          <h1 className=\"header\">Github Search</h1>\n          <form className=\"Form\" onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                className=\"gitSearch\"\n                placeholder=\"search repo\"\n                \n              />\n            <button>Search</button>\n          </form>\n          <ul>\n            {renderItems()}\n          </ul>\n        </div>\n      );\n  };\n\n\n\n// import useInfiniteScroll from 'react-infinite-scroll-hook';\n\n\n// const Search = () => {\n//   const [searchString, setSearchString] = useState(\"\");\n//   const [items, setItems] = useState([]);\n//   const [hasNextPage, setHasNextPage] = useState(false);\n//   const [page, setPage] = useState(1);\n//   const [loading, setLoading] = useState(false);\n//   const [star, setStar] = useState()\n\n\n//   const handleLoadMore = () => {\n\n//     setLoading(true);\n//     fetch(\n//       `http://localhost:5000/search/repositories?q=${searchString}`\n//       // `https://api.github.com/search/repositories?q=${searchString}`\n//     )\n//     .then(res => res.json())\n//     .then(res => {\n//       //  console.log(res)\n//        setLoading(false);\n//        let total = res.total_count\n//        let current = page * 30;\n//        let hasNextPage = (current <= total);\n//        setHasNextPage(hasNextPage);\n//       //  setHasNextPage(false)\n//        setItems([...items, res.items]);\n//       //  console.log(items)\n//        setStar(star)\n//        setPage(page+1)\n//     })\n//     .catch(() => {\n//       console.log(\"stop it\");\n//       setLoading(false);\n//     });\n//   }\n\n//   const infiniteRef = useInfiniteScroll({\n//     loading,\n//     hasNextPage,\n//     onLoadMore: handleLoadMore,\n//     // scrollContainer,\n//   });\n\n//   const renderItems = () => {\n//     if (!items || items.length <= 0 ) return\n//     return items[0].map((item) => {\n//       // console.log(item.name)\n//       return <li key={item.id}>Name: {item.name}, Stars: {item.stargazers_count}</li>\n//   })\n// }\n\n//   let onChange = e => {\n//     setItems([])\n//     setPage(0)\n//     setHasNextPage(true)\n//     setSearchString(e.target.value)\n//   }\n\n//   let handleSort = () => {\n//     // fetch(`http://localhost:4000/search/repositories?&sort=stars&order=desc`)\n//   }\n\n//   let handleClick = () => {\n//     alert(\"clicked\")\n//   }\n\n//   return (\n//     <div>\n//       <h1 className=\"header\">Github Search</h1>\n//       <div className=\"gitSearchDiv\">\n//         <input\n//           type=\"search\"\n//           className=\"gitSearch\"\n//           placeholder=\"search repo\"\n//           onChange={e => onChange(e)}\n//         />\n//         {/* <button onClick={handleSort()}>Sort</button> */}\n//       </div>\n//        <ul ref={infiniteRef} onClick={handleClick}>\n//         {renderItems()}\n//         {/* {loading && <li>Loading...</li>} */}\n//       </ul>\n//     </div>\n//   );\n// };\n\nexport default Search;"]},"metadata":{},"sourceType":"module"}