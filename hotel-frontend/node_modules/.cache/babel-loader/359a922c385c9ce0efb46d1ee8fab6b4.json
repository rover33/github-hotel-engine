{"ast":null,"code":"var _jsxFileName = \"/Users/remypearlstone/Desktop/webdev/hotel-engine-github/hotel-frontend/src/Search.js\";\nimport React, { useState, useEffect } from \"react\";\n\nconst Search = () => {\n  const [query, setQuery] = useState(\"\");\n  const [stars, setStars] = useState();\n  const [items, setItems] = useState([]);\n  const [languages, setLanguages] = useState({\n    JavaScript: false,\n    Python: false,\n    Ruby: false,\n    Java: false,\n    Swift: false\n  });\n  useEffect(() => {\n    // console.log(\"hello\")\n    if (!query) return;\n\n    const fetchData = async () => {\n      const response = await fetch(`http://localhost:5000/search/repositories?searchTerms=${query}&numStars=${stars}`);\n      const items = await response.json();\n      setItems(items.items);\n      setStars(items.stars);\n      console.log(items.langauge);\n    };\n\n    fetchData();\n  }, [query, stars]);\n\n  const handleChange = e => {\n    setItems([]);\n    setStars(stars);\n    setQuery(e.target.value);\n  };\n\n  const checkBoxTypeClick = e => {\n    setStars(stars);\n  }; // const checkBoxLanguageClick = e => {\n  //   let tempLanguage = { ...languages };\n  //   tempLanguage[e.target.language] != languages[e.target.langauge];\n  //   setLanguages(tempLanguage);\n  // };\n\n\n  const checkIfType = (arr1, arr2) => {\n    return arr1.some(item => arr2.includes(item));\n  };\n\n  const renderItems = () => {\n    let {\n      Python,\n      JavaScript,\n      Ruby,\n      Java,\n      Swift\n    } = languages;\n    let tempArr = new Set();\n    let langArr = [];\n    if (Python) langArr.push(\"Python\");\n    if (JavaScript) langArr.push(\"JavaScript\");\n    if (Java) langArr.push(\"Java\");\n    if (Ruby) langArr.push(\"Ruby\");\n    if (Swift) langArr.push(\"Swift\");\n\n    if (langArr.length <= 0 && query.length <= 0) {\n      tempArr = items;\n    } else {\n      for (let i = 0; i < items.length; i++) {\n        if (query.length > 0 && items[i].name.toLowerCase().includes(query)) {\n          tempArr.add(items[i]);\n        }\n\n        if (langArr.length > 0 && checkIfType(langArr, items[i].language)) {\n          tempArr.add(items[i]);\n        }\n      }\n    }\n\n    tempArr = Array.from(tempArr);\n    return /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }\n    }, tempArr.map(el => /*#__PURE__*/React.createElement(\"div\", {\n      key: el.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }\n    }, \"Name: \", el.name, \", Stars: \", el.stargazers_count, \", Language: \", el.language))));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, \"Github Search\"), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"Form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    autoFocus: true,\n    className: \"gitSearch\",\n    placeholder: \"search repo\",\n    onChange: handleChange,\n    value: query,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, \"Search\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"checkBoxes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }, \"Sort by Stars\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    id: \"stars\",\n    name: \"stars\",\n    onClick: e => checkBoxTypeClick(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }, \"Sort by Score\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    id: \"score\",\n    name: \"score\",\n    onClick: e => checkBoxTypeClick(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  }, \"Languages\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    id: \"Python\",\n    name: \"Python\" // onClick={e => checkBoxLanguageClick(e)}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, renderItems()));\n};\n\nexport default Search;","map":{"version":3,"sources":["/Users/remypearlstone/Desktop/webdev/hotel-engine-github/hotel-frontend/src/Search.js"],"names":["React","useState","useEffect","Search","query","setQuery","stars","setStars","items","setItems","languages","setLanguages","JavaScript","Python","Ruby","Java","Swift","fetchData","response","fetch","json","console","log","langauge","handleChange","e","target","value","checkBoxTypeClick","checkIfType","arr1","arr2","some","item","includes","renderItems","tempArr","Set","langArr","push","length","i","name","toLowerCase","add","language","Array","from","map","el","id","stargazers_count"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\n\nconst Search = () => {\n  const [query, setQuery] = useState(\"\");\n  const [stars, setStars ] = useState();\n  const [items, setItems] = useState([]);\n  const [languages, setLanguages] = useState({\n    JavaScript: false,\n    Python: false, \n    Ruby: false,\n    Java: false,\n    Swift: false\n  });\n\n  useEffect(() => {\n    // console.log(\"hello\")\n    if (!query) return;\n\n    const fetchData = async () => {\n      const response = await fetch(\n        `http://localhost:5000/search/repositories?searchTerms=${query}&numStars=${stars}`\n      );\n      const items = await response.json();\n      setItems(items.items);\n      setStars(items.stars)\n      console.log(items.langauge)\n    };\n    fetchData()\n  }, [query, stars])\n\n\n\n\n  const handleChange = (e) => {\n      setItems([]);\n      setStars(stars)\n      setQuery(e.target.value);\n    }\n      \n\n  const checkBoxTypeClick = e => {\n    setStars(stars)\n  }\n  \n  // const checkBoxLanguageClick = e => {\n  //   let tempLanguage = { ...languages };\n  //   tempLanguage[e.target.language] != languages[e.target.langauge];\n  //   setLanguages(tempLanguage);\n  // };\n\n  const checkIfType = (arr1, arr2) => {\n    return arr1.some(item => arr2.includes(item))\n  }\n\n\n\n  const renderItems = () => {\n    let { Python, JavaScript, Ruby, Java, Swift} = languages;\n    let tempArr = new Set();\n    let langArr = [];\n    if (Python) langArr.push(\"Python\");\n    if (JavaScript) langArr.push(\"JavaScript\");\n    if (Java) langArr.push(\"Java\")\n    if (Ruby) langArr.push(\"Ruby\");\n    if (Swift) langArr.push(\"Swift\")\n    if(langArr.length <= 0 && query.length <= 0 ){\n      tempArr = items;\n    } else {\n      for (let i = 0; i < items.length; i++) {\n        if (\n          query.length > 0 && items[i].name.toLowerCase().includes(query)) {\n            tempArr.add(items[i]);\n          }\n        if (langArr.length > 0 && checkIfType(langArr, items[i].language)){\n          tempArr.add(items[i])\n        }\n      }\n    }\n\n    tempArr = Array.from(tempArr)\n\n    return (\n      <ul>\n      {tempArr.map (el => (\n        <div key={el.id}>\n          <li>Name: {el.name}, Stars: {el.stargazers_count}, Language: {el.language}</li>\n        </div>\n      ))}\n      </ul>\n    )\n  }\n\n\n\n  return (\n      <div>\n        <h1 className=\"header\">Github Search</h1>\n        <form className=\"Form\">\n          <input\n              type=\"text\"\n              autoFocus\n              className=\"gitSearch\"\n              placeholder=\"search repo\"\n              onChange={handleChange}\n              value={query}\n            />\n          <button>Search</button>\n        </form>\n        <div className=\"checkBoxes\">\n          <label>Sort by Stars</label>\n          <input\n            type=\"checkbox\"\n            id=\"stars\"\n            name=\"stars\"\n            onClick={e => checkBoxTypeClick(e)}\n          >\n          </input>\n          <label>Sort by Score</label>\n          <input\n            type=\"checkbox\"\n            id=\"score\"\n            name=\"score\"\n            onClick={e => checkBoxTypeClick(e)}\n          >\n          </input>\n          <label>Languages</label>\n          <input\n            type=\"checkbox\"\n            id=\"Python\"\n            name=\"Python\"\n            // onClick={e => checkBoxLanguageClick(e)}\n          >\n          </input>\n\n        </div>\n        <ul>\n          {renderItems()}\n        </ul>\n      </div>\n    );\n  };\n\n\nexport default Search;\n\n"]},"metadata":{},"sourceType":"module"}