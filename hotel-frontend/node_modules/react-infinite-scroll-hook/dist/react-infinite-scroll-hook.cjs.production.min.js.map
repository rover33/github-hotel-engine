{"version":3,"file":"react-infinite-scroll-hook.cjs.production.min.js","sources":["../src/utils.ts","../src/useInfiniteScroll.ts","../src/useInterval.ts","../src/useWindowSize.ts"],"sourcesContent":["import { NullOrUndefined } from './types';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport function isNullOrUndefined(value: any): value is NullOrUndefined {\r\n  return [null, undefined].includes(value);\r\n}\r\n","import { useEffect, useRef, useState } from 'react';\r\nimport useWindowSize from './useWindowSize';\r\nimport useInterval from './useInterval';\r\nimport { isNullOrUndefined } from './utils';\r\nexport type InfiniteScrollContainer = 'window' | 'parent';\r\nconst WINDOW: InfiniteScrollContainer = 'window';\r\nconst PARENT: InfiniteScrollContainer = 'parent';\r\n\r\ntype InfiniteContainer = HTMLElement | (Node & ParentNode);\r\n\r\nfunction getElementSizes(element: InfiniteContainer) {\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  const parentRect = (element as any).getBoundingClientRect();\r\n  const { top, bottom, left, right } = parentRect;\r\n  return { top, bottom, left, right };\r\n}\r\n\r\nfunction isElementInView(\r\n  element: InfiniteContainer,\r\n  windowHeight: number,\r\n  windowWidth: number,\r\n) {\r\n  if (element) {\r\n    const { left, right, top, bottom } = getElementSizes(element);\r\n    if (left > windowWidth) {\r\n      return false;\r\n    } else if (right < 0) {\r\n      return false;\r\n    } else if (top > windowHeight) {\r\n      return false;\r\n    } else if (bottom < 0) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nexport interface UseInfiniteScrollArgs {\r\n  // Some sort of \"fetching\" info of the request.\r\n  loading: boolean;\r\n  // If the list has more items to load.\r\n  hasNextPage: boolean;\r\n  // The callback function to execute when the threshold is exceeded.\r\n  onLoadMore: Function;\r\n  // Maximum distance to bottom of the window/parent to trigger the callback. Default is 150.\r\n  threshold?: number;\r\n  // Frequency to check the dom. Default is 200.\r\n  checkInterval?: number;\r\n  // May be `\"window\"` or `\"parent\"`. Default is `\"window\"`. If you want to use a scrollable parent for the infinite list, use `\"parent\"`.\r\n  scrollContainer?: InfiniteScrollContainer;\r\n}\r\n\r\nfunction useInfiniteScroll<T extends HTMLElement>({\r\n  loading,\r\n  hasNextPage,\r\n  onLoadMore,\r\n  threshold = 150,\r\n  checkInterval = 200,\r\n  scrollContainer = WINDOW,\r\n}: UseInfiniteScrollArgs) {\r\n  const ref = useRef<T>(null);\r\n  const { height: windowHeight, width: windowWidth } = useWindowSize();\r\n  // Normally we could use the \"loading\" prop, but when you set \"checkInterval\" to a very small\r\n  // number (like 10 etc.), some request components can't set its loading state\r\n  // immediately (I had this problem with react-apollo's Query component. In some cases, it runs\r\n  // \"updateQuery\" twice). Thus we set our own \"listen\" state which immeadiately turns to \"false\" on\r\n  // calling \"onLoadMore\".\r\n  const [listen, setListen] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (!loading) {\r\n      setListen(true);\r\n    }\r\n  }, [loading]);\r\n\r\n  function getBottomOffset() {\r\n    const element = ref.current;\r\n\r\n    if (!element || isNullOrUndefined(windowHeight)) {\r\n      return null;\r\n    }\r\n\r\n    const rect = element.getBoundingClientRect();\r\n\r\n    const bottom = rect.bottom;\r\n    let bottomOffset = bottom - windowHeight;\r\n\r\n    if (scrollContainer === PARENT) {\r\n      const parent = element.parentNode;\r\n      if (!parent) {\r\n        return null;\r\n      }\r\n      const { bottom: parentBottom } = getElementSizes(parent);\r\n      // Distance between bottom of list and its parent\r\n      bottomOffset = bottom - parentBottom;\r\n    }\r\n\r\n    return bottomOffset;\r\n  }\r\n\r\n  function isParentInView() {\r\n    const parent = ref.current?.parentNode;\r\n    if (\r\n      !parent ||\r\n      isNullOrUndefined(windowHeight) ||\r\n      isNullOrUndefined(windowWidth)\r\n    ) {\r\n      return false;\r\n    }\r\n    return isElementInView(parent, windowHeight, windowWidth);\r\n  }\r\n\r\n  function isListInView() {\r\n    const element = ref.current;\r\n    if (\r\n      !element ||\r\n      isNullOrUndefined(windowHeight) ||\r\n      isNullOrUndefined(windowWidth)\r\n    ) {\r\n      return false;\r\n    }\r\n    return isElementInView(element, windowHeight, windowWidth);\r\n  }\r\n\r\n  function listenBottomOffset() {\r\n    if (listen && !loading && hasNextPage) {\r\n      if (ref.current) {\r\n        if (scrollContainer === PARENT) {\r\n          if (!isParentInView()) {\r\n            // Do nothing if the parent is out of screen\r\n            return;\r\n          }\r\n        } else if (!isListInView()) {\r\n          return;\r\n        }\r\n\r\n        // Check if the distance between bottom of the container and bottom of the window or parent\r\n        // is less than \"threshold\"\r\n        const bottomOffset = getBottomOffset();\r\n\r\n        if (isNullOrUndefined(bottomOffset)) {\r\n          return;\r\n        }\r\n\r\n        const validOffset = bottomOffset < threshold;\r\n\r\n        if (validOffset) {\r\n          setListen(false);\r\n          onLoadMore();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  useInterval(\r\n    () => {\r\n      listenBottomOffset();\r\n    },\r\n    // Stop interval when there is no next page.\r\n    hasNextPage ? checkInterval : 0,\r\n  );\r\n\r\n  return ref;\r\n}\r\n\r\nexport default useInfiniteScroll;\r\n","import { useRef, useEffect } from 'react';\r\nimport { Maybe } from './types';\r\n\r\nfunction useInterval(callback: VoidFunction, delay: number) {\r\n  const savedCallback = useRef<Maybe<VoidFunction>>(null);\r\n\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current?.();\r\n    }\r\n\r\n    if (delay) {\r\n      const id = setInterval(() => {\r\n        tick();\r\n      }, delay);\r\n      return () => {\r\n        clearInterval(id);\r\n      };\r\n    }\r\n  }, [delay]);\r\n}\r\n\r\nexport default useInterval;\r\n","import { useState, useEffect, useCallback } from 'react';\r\n\r\nfunction useWindowSize() {\r\n  const validWindow = typeof window === 'object';\r\n\r\n  const getSize = useCallback(() => {\r\n    const size = {\r\n      width: validWindow ? window.innerWidth : undefined,\r\n      height: validWindow ? window.innerHeight : undefined,\r\n    };\r\n\r\n    return size;\r\n  }, [validWindow]);\r\n\r\n  const [size, setSize] = useState(getSize());\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setSize(getSize());\r\n    }\r\n\r\n    if (validWindow) {\r\n      window.addEventListener('resize', handleResize);\r\n\r\n      return () => {\r\n        window.removeEventListener('resize', handleResize);\r\n      };\r\n    }\r\n  }, [getSize, validWindow]);\r\n\r\n  return size;\r\n}\r\n\r\nexport default useWindowSize;\r\n"],"names":["isNullOrUndefined","value","undefined","includes","getElementSizes","element","parentRect","getBoundingClientRect","top","bottom","left","right","isElementInView","windowHeight","windowWidth","callback","delay","savedCallback","loading","hasNextPage","onLoadMore","threshold","checkInterval","scrollContainer","ref","useRef","validWindow","window","getSize","useCallback","width","innerWidth","height","innerHeight","useState","size","setSize","useEffect","handleResize","addEventListener","removeEventListener","useWindowSize","listen","setListen","current","parent","_ref$current","parentNode","bottomOffset","getBottomOffset","listenBottomOffset","id","setInterval","clearInterval"],"mappings":"oGAGgBA,EAAkBC,SACzB,CAAC,UAAMC,GAAWC,SAASF,GCMpC,SAASG,EAAgBC,OAEjBC,EAAcD,EAAgBE,8BAE7B,CAAEC,IAD4BF,EAA7BE,IACMC,OADuBH,EAAxBG,OACSC,KADeJ,EAAhBI,KACOC,MADSL,EAAVK,OAI7B,SAASC,EACPP,EACAQ,EACAC,MAEIT,EAAS,OAC0BD,EAAgBC,QAA7CK,KACGI,SACF,EACF,KAHOH,MAGK,SACV,EACF,KALcH,IAKJK,SACR,EACF,KAPmBJ,OAON,SACX,SAIJ,kBAkBT,gBClDqBM,EAAwBC,EACrCC,EDkDNC,IAAAA,QACAC,IAAAA,YACAC,IAAAA,eACAC,UAAAA,aAAY,UACZC,cAAAA,aAAgB,UAChBC,gBAAAA,aAtDsC,WAwDhCC,EAAMC,SAAU,QE3DxB,eACQC,EAAgC,iBAAXC,OAErBC,EAAUC,eAAY,iBACb,CACXC,MAAOJ,EAAcC,OAAOI,gBAAa7B,EACzC8B,OAAQN,EAAcC,OAAOM,iBAAc/B,KAI5C,CAACwB,MAEoBQ,WAASN,KAA1BO,OAAMC,cAEbC,aAAU,oBACCC,IACPF,EAAQR,QAGNF,SACFC,OAAOY,iBAAiB,SAAUD,GAE3B,WACLX,OAAOa,oBAAoB,SAAUF,MAGxC,CAACV,EAASF,IAENS,EFgC8CM,GAArC5B,IAARmB,OAA6BlB,IAAPgB,QAMFI,YAAS,GAA9BQ,OAAQC,cAEfN,aAAU,WACHnB,GACHyB,GAAU,KAEX,CAACzB,ICvEeH,EDyJjB,0BA9BI2B,IAAWxB,GAAWC,GACpBK,EAAIoB,QAAS,IAzHiB,WA0H5BrB,QA1BFsB,YAASrB,EAAIoB,4BAAJE,EAAaC,aAG1B/C,EAAkBa,IAClBb,EAAkBc,KAIbF,EAAgBiC,EAAQhC,EAAcC,eAuBlC,KAnBLT,EAAUmB,EAAIoB,UAGlB5C,EAAkBa,IAClBb,EAAkBc,KAIbF,EAAgBP,EAASQ,EAAcC,cAiBpCkC,iBA9DJ3C,EAAUmB,EAAIoB,YAEfvC,GAAWL,EAAkBa,UACzB,SAKHJ,EAFOJ,EAAQE,wBAEDE,OAChBuC,EAAevC,EAASI,KAhFQ,WAkFhCU,EAA4B,KACxBsB,EAASxC,EAAQ0C,eAClBF,SACI,KAITG,EAAevC,EAFkBL,EAAgByC,GAAzCpC,cAKHuC,EAyCkBC,MAEjBjD,EAAkBgD,UAIFA,EAAe3B,IAGjCsB,GAAU,GACVvB,SAnCAf,IAZAwC,EAuDJK,IC1JuClC,ED6JzCG,EAAcG,EAAgB,EC5J1BL,EAAgBQ,SAA4B,MAElDY,aAAU,WACRpB,EAAc2B,QAAU7B,IACvB,CAACA,IAEJsB,aAAU,cAKJrB,EAAO,KACHmC,EAAKC,aAAY,2BAJvBnC,EAAc2B,6BAAd3B,KAMGD,UACI,WACLqC,cAAcF,OAGjB,CAACnC,ID4IGQ"}